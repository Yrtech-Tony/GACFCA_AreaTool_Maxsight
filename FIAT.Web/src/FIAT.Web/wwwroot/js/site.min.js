var _WAPYN = false; $(document).ready(function () { var dw = $(document).width(); if (dw < 500) { _WAPYN = true } else { _WAPYN = false } }); function JsonToCboList(nameKey, valueKey, dataJson, options) { var cboList = ""; if (options && options.SelectType) { if (options.SelectType.toUpperCase() == "SELECT") { cboList += "<option Value='select'>- ÇëÑ¡Ôñ -</option>" } else { if (options.SelectType.toUpperCase() == "ALL") { cboList += "<option Value='0'>- È«²¿ -</option>" } else { if (options.SelectType.toUpperCase() == "BLANK") { cboList += "<option Value=''></option>" } } } } if (dataJson && dataJson.length != 0) { for (var i = 0; i < dataJson.length; i++) { if (dataJson[i][nameKey] && dataJson[i][valueKey]) { cboList += "<option  Value=" + dataJson[i][valueKey] + ">" + dataJson[i][nameKey] + "</option>" } } } return cboList } function DateFormatCheckEvent(elementID, options) { var _oldValueDate; $("#" + elementID).prop("maxLength", "10"); if (options && options.CheckType.toUpperCase() == "BLANK") { $("#" + elementID).focus(function () { _oldValueDate = $(this).val() }).blur(function () { if ($.trim($(this).val()) == "") { $(this).val("") } else { if (!FormatDate(elementID)) { $(this).val(_oldValueDate) } } }) } else { $("#" + elementID).focus(function () { _oldValueDate = $(this).val() }).blur(function () { if (!FormatDate(elementID)) { $(this).val(_oldValueDate); $(this).datetimepicker("update") } }) } } function FormatDate(dateID) { var date_after_input = $("#" + dateID).val(); var check = true; if (date_after_input.length != 10) { check = false } else { var arr = date_after_input.split("-"); if (arr.length != 3) { check = false } else { if (arr[0].length != 4) { check = false } if (arr[1].length != 2) { check = false } if (arr[2].length != 2) { check = false } if (!(/^\d+$/.test(arr[0]) && /^\d+$/.test(arr[1]) && /^\d+$/.test(arr[2]))) { check = false } if ((arr[0] % 4 == 0 && arr[0] % 100 != 0) || (arr[0] % 100 == 0 && arr[0] % 400 == 0)) { if (arr[1] == "02") { if (parseInt(arr[2], 10) > 29) { check = false } } } else { if (arr[1] == "02") { if (parseInt(arr[2], 10) > 28) { check = false } } } if (parseInt(arr[1], 10) > 12 || parseInt(arr[1], 10) < 0) { check = false } if (arr[1] == "01" || arr[1] == "03" || arr[1] == "05" || arr[1] == "07" || arr[1] == "08" || arr[1] == "10" || arr[1] == "12") { if (parseInt(arr[2], 10) > 31 || parseInt(arr[2], 10) < 0) { check = false } } if (arr[1] == "04" || arr[1] == "06" || arr[1] == "09" || arr[1] == "11") { if (parseInt(arr[2], 10) > 30 || parseInt(arr[2], 10) < 0) { check = false } } if (parseInt(arr[0], 10) < 1900) { check = false } } } return check } function fn_GetBrowerClient8Width() { var height = window.document.body.clientHeight * 0.8; return height + "px" } function fn_GetBrowerClient6Width() { var height = window.document.body.clientHeight * 0.6; return height + "px" } function NameValueListToJson(nameKey, valueKey, dataJson, options) { var json = {}; if (options && options.SelectType) { if (options.SelectType.toUpperCase() == "SELECT") { json["select"] = "- " + $.getResource("Select") + " -" } else { if (options.SelectType.toUpperCase() == "ALL") { json["0"] = "- " + $.getResource("All") + " -" } else { if (options.SelectType.toUpperCase() == "BLANK") { json[""] = "" } } } } if (dataJson && dataJson.length != 0) { for (var i = 0; i < dataJson.length; i++) { if (dataJson[i][nameKey] && dataJson[i][valueKey]) { json[dataJson[i][valueKey]] = dataJson[i][nameKey] } } } return json } function fn_GetRequest() { var url = decodeURI(location.search); var theRequest = new Object(); if (url.indexOf("?") != -1) { var str = url.substr(1); var strs = str.split("&"); for (var i = 0; i < strs.length; i++) { theRequest[strs[i].split("=")[0]] = unescape(strs[i].split("=")[1]) } } return theRequest } Request = fn_GetRequest(); function fn_GetCookie(objname) { var arrstr = document.cookie.split("; "); for (var i = 0; i < arrstr.length; i++) { var temp = arrstr[i].split("="); if (temp[0] == objname) { return unescape(temp[1]) } } } function Reconvert(str) { str = str.replace(/(\\u)(\w{1,4})/gi, function ($0) { return (String.fromCharCode(parseInt((escape($0).replace(/(%5Cu)(\w{1,4})/g, "$2")), 16))) }); str = str.replace(/(&#x)(\w{1,4});/gi, function ($0) { return String.fromCharCode(parseInt(escape($0).replace(/(%26%23x)(\w{1,4})(%3B)/g, "$2"), 16)) }); str = str.replace(/(&#)(\d{1,6});/gi, function ($0) { return String.fromCharCode(parseInt(escape($0).replace(/(%26%23)(\d{1,6})(%3B)/g, "$2"))) }); return str } function fn_TipOk(grdID, trID, colName) { var tipElement = "td[aria-describedby='" + grdID + "_" + colName + "']"; $("table[id='" + grdID + "'] tr[id='" + trID + "'] " + tipElement).text($("#txtContent").val()); $("table[id='" + grdID + "'] tr[id='" + trID + "']").addClass("edited") } function fn_tipped(grdID, colName, options) { var title = ""; var content = ""; var type = ""; var width = ""; var height = ""; var editYNCol = ""; if (options) { title = options.tipTitle; type = options.tipType; width = options.tipWidth; height = options.tipHeight; editYNCol = options.tipEditYNCol } if (editYNCol != undefined && editYNCol != "") { Tipped.create("table[id='" + grdID + "'] td[aria-describedby='" + grdID + "_" + colName + "']", function (element) { if ($(element).parent().find("td[aria-describedby='" + grdID + "_" + editYNCol + "']").text() == "E") { var txtOk = "<button class='btn btn-primary' id='btnOk' onclick=\"fn_TipOk('" + grdID + "','" + $(element).parent().attr("id") + "','" + colName + "')\"><i class='glyphicon glyphicon-ok'></i></button></center>"; content = "<center><textarea id='txtContent' style='padding:2px;resize:none;min-height:70px;border:dashed 1px;width:" + width + ";height:" + height + "'>" + element.innerHTML.replace("&nbsp;", "").replace(/\r/ig, "").replace(/\n/ig, "<br/>") + "</textarea><br/>" + txtOk } else { content = "<div style='width:" + width + ";height:" + height + "'>" + element.innerHTML.replace(/\r/ig, "").replace(/\n/ig, "<br/>"); +"</div>" } return { title: title, content: content } }, { skin: "light", size: "x-small", radius: true, position: "bottomleft", onShow: function (element) { $(element).addClass("highlight") } }) } else { Tipped.create("table[id='" + grdID + "'] td[aria-describedby='" + grdID + "_" + colName + "']", function (element) { if (type == "E") { var txtOk = "<button class='btn btn-primary' id='btnOk' onclick=\"fn_TipOk('" + grdID + "','" + $(element).parent().attr("id") + "','" + colName + "')\"><i class='glyphicon glyphicon-ok'></i></button></center>"; content = "<center><textarea id='txtContent' style='resize:none;min-height:70px;border:dashed 1px;width:" + width + ";height:" + height + "'>" + element.innerHTML.replace("&nbsp;", "").replace(/\r/ig, "").replace(/\n/ig, "<br/>") + "</textarea><br/>" + txtOk } else { content = "<div style='width:" + width + ";height:" + height + "'>" + element.innerHTML.replace(/\r/ig, "").replace(/\n/ig, "<br/>"); +"</div>" } return { title: title, content: content } }, { skin: "light", size: "x-small", radius: true, position: "bottomleft", onShow: function (element) { $(element).addClass("highlight") } }) } } function Setcookie(name, value) { var expdate = new Date(); expdate.setHours(expdate.getHours() + 12 * 24 * 30); document.cookie = name + "=" + value + ";expires=" + expdate.toGMTString() + ";path=/" } function GetCookie(c_name) { if (document.cookie.length > 0) { c_start = document.cookie.indexOf(c_name + "="); if (c_start != -1) { c_start = c_start + c_name.length + 1; c_end = document.cookie.indexOf(";", c_start); if (c_end == -1) { c_end = document.cookie.length } return unescape(document.cookie.substring(c_start, c_end)) } } return "" } function CheckCookie(name) { cookieValue = GetCookie(name); if (cookieValue != null && cookieValue != "") { return true } else { return false } } Date.prototype.Format = function (fmt) { var o = { "M+": this.getMonth() + 1, "d+": this.getDate(), "h+": this.getHours(), "m+": this.getMinutes(), "s+": this.getSeconds(), "q+": Math.floor((this.getMonth() + 3) / 3), "S": this.getMilliseconds() }; if (/(y+)/.test(fmt)) { fmt = fmt.replace(RegExp.$1, (this.getFullYear() + "").substr(4 - RegExp.$1.length)) } for (var k in o) { if (new RegExp("(" + k + ")").test(fmt)) { fmt = fmt.replace(RegExp.$1, (RegExp.$1.length == 1) ? (o[k]) : (("00" + o[k]).substr(("" + o[k]).length))) } } return fmt };